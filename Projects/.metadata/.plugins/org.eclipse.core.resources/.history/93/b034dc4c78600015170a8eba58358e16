package my.rest;

import java.io.IOException;
//import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.io.InputStreamReader;
import java.io.DataOutputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class SrvltMyRest
 */
@WebServlet("/SrvltMyRest")
public class SrvltMyRest extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private final String USER_AGENT = "Mozilla/5.0";
	private final String CHAR_SET = "utf-8";
	private final String TYPE_CONT = "text/plain";
	private final String OPENHAB_URL = "http://10.32.0.251:8080";
	private final String COMMAND_ON = "ON";
	private final String COMMAND_OFF ="OFF";
	private final String STATE_OPEN = "OPEN";
	private final String STATE_CLOSED = "CLOSED";
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub

//		char  pinsType [] = {'1',  '1',  '1',  '1'  ,'1',  'v',  '1',  '1',  '1',  '1',  '1',  '1',  '1',  '1'};		
		String itemName [] = {"m1p00","m1p01","m1p02","m1p03","m1p04","m1p05","m1p06","m1p07","m1p08","m1p09","m1p10","m1p11","m1p12","m1p13"};
		char itemType [] = {'1',  '1',  '1',  '1'  ,'1',  '1',  '1',  '2',  '2',  '2',  '2', '2', '2',  '2'};
		String ParamLine = "";
		String ParamName = "mega0.ini";
		int j, i=0;
		
		int readChar;
	try (FileInputStream filePointId = new FileInputStream(ParamName)){
		do {
//			readChar = filePointId.read();
//			if(readChar != -1);	pinsType [i] = (char)readChar;	
			readChar = filePointId.read();
			if(readChar != -1);	itemType [i] = (char)readChar;
			itemName [i] = "";
		
				do{
					readChar = filePointId.read();
					if((readChar != -1)||(readChar != ';'));			
					itemName [i] = itemName [i] + readChar;}
				while(true);
			System.out.println("Value Items Name defind = " + itemName [i]);
		} while (i<=13);
	}
	catch (FileNotFoundException e){System.out.println("File "+ParamName + "not found.");}
	catch (IOException e){System.out.println("Input/output error.");}
		

		String str_pt = request.getParameter("pt");

		
//		String str_v = request.getParameter("v");
//		String str_dir = request.getParameter("dir");
//		String response = "";

		String setCommand = new String();
		
		if (str_pt == "" || str_pt == null) 
			{System.out.println("Value Pointer Code not defind");
			return;
			}
		
		byte value_pt = 0;
			try {
				value_pt = Byte.parseByte(str_pt);
				}
				catch (Exception ex)
				{
				System.out.println("Value Pointer Code : " + value_pt);	
				}
			
		if (value_pt < 0 || value_pt > 14)
			{System.out.println("Value Pointer out of interval");
//			doSetError( response );
			return;
			}
		
		switch (itemType [value_pt]){
				case 1:
//				setReqType ="PUT";
				setCommand = STATE_CLOSED;
				if (isValueUp())setCommand = STATE_OPEN;
				sendCommandPUT(itemName [value_pt],setCommand);
				break;
				case 2:
//				setReqType = "GET";
				setCommand = COMMAND_OFF;
				if (isValueUp())setCommand = COMMAND_ON;
				sendCommandGET(itemName [value_pt],setCommand);
				break;
				default:
		}
		
		
		
		}
		else
		{
			try {
			    value_m = Byte.parseByte(str_m);
				}
				catch ( Exception ex )
				{
					System.out.println("Set UpDown Code Exception");	
				}
			if (value_m == 1)
				{
				setString = itemName[value_pt]+"=OFF";
				setType = itemType [value_pt];
				if (setType == "PUT")
				setDate = "CLOSED";
				else
					setDate = "OFF";
				

				}
			else
			{	
				System.out.println("Value UpDn out of interval");
				return;
			}
		}

//----------------------------------------------------------------------			    
				try
					{
					sendCommand(setString, setDate, setType);
					}
				catch ( Exception ex )
					{
					System.out.println("sendGet Exception");
					}			

//----------------------------------------------------------------------
//			    doSetResult( response, result );
//			    return;

//		}

	}



//con.connect();		
		
//		con.setRequestMethod("POST");
//		con.setDoOutput(true);
		
//------recieved response code		
		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'GET' request to URL : " + openHabURL);
		System.out.println("Response Code : " + responseCode);
		
//------recieved response data
		BufferedReader in = new BufferedReader(
		new InputStreamReader(con.getInputStream()));
		
		String inputLine;
		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
				}
		in.close();

//print result
		System.out.println(response.toString());
		}





protected boolean isValueUp(){
	String str_m = request.getParameter("m");
		if (str_m == "" || str_m == null) 
		{
		System.out.println("Set UpDown Code not defind. SetItem ->up");
		return false;
		}
		else {
			System.out.println("Set UpDown Code defind. SetItem ->down");	
			return true}

}

	protected void sendCommandPUT(String itemName, String Command) throws Exception
	{
		byte[] postData = Command.getBytes("UTF-8");
	    System.out.println("Testing 1 - Send Http GET/PUT request"+postData);
		String urlString = OPENHAB_URL+"/rest/items/"+itemName;
	    
//		try{
		URL url = new URL(urlString);
/*	    }
	    catch (MalformedURLException exception){
	    	exception.printStackTrace();
	    }
	    */
//	    try{
		HttpURLConnection con = (HttpURLConnection) url.openConnection();
		con.setRequestProperty("User-Agent", USER_AGENT);
		con.setRequestProperty("Content-Type", TYPE_CONT);
		con.setRequestProperty("charset", CHAR_SET);
		con.setRequestMethod("PUT");			
		con.setDoInput(true);
		con.setDoOutput(true);
		DataOutputStream httpout = new DataOutputStream(con.getOutputStream());
		httpout.write(postData);
	/*    
	    catch (IOException){exception.printStackTrace();
	    
	    }
*/		
	httpout.flush();
	httpout.close();
	System.out.println("\nSending 'PUT' request to URL : " + urlString);	
	int responseCode = con.getResponseCode();
	System.out.println("Response Code : " + responseCode);
	
	//------recieved response data
			BufferedReader in = new BufferedReader(
			new InputStreamReader(con.getInputStream()));
			
			String inputLine;
			StringBuffer response = new StringBuffer();

			while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
					}
			in.close();

	//print result
			System.out.println(response.toString());
	
	if(con != null){
		con.disconnect();
		}
	}
	
	protected void sendCommandGET(String itemName, String Command) throws Exception
	{
	    System.out.println("Testing 1 - Send Http GET/PUT request = " + Command);
	    String urlString = OPENHAB_URL+"/CMD?"+itemName+"="+Command;
	    
//		try{
		URL url = new URL(urlString);
/*	    }
	    catch (MalformedURLException exception){
	    	exception.printStackTrace();
	    }
	    */
//	    try{
		HttpURLConnection con = (HttpURLConnection) url.openConnection();
		
		con.setRequestProperty("User-Agent", USER_AGENT);
		con.setRequestProperty("Content-Type", TYPE_CONT);
		con.setRequestProperty("charset", CHAR_SET);
		con.setRequestMethod("GET");
		
		System.out.println("\nSending 'GET' request to URL : " + urlString);	
		
		int responseCode = con.getResponseCode();
		System.out.println("Response Code : " + responseCode);
		
//------recieved response data
				BufferedReader in = new BufferedReader(
				new InputStreamReader(con.getInputStream()));
				
				String inputLine;
				StringBuffer response = new StringBuffer();

				while ((inputLine = in.readLine()) != null) {
						response.append(inputLine);
						}
				in.close();

		//print result
				System.out.println(response.toString());
		
		if(con != null){
			con.disconnect();
		}
		
	}
}